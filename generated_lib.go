// Copyright 2025 Colton Loftus
// SPDX-License-Identifier: AGPL-3.0-only

package pkg

import v5 "github.com/godbus/dbus/v5"

// DO NOT EDIT; AUTOGENERATED ON Fri Jul 25 09:54:35 2025
const (
	OrcaServiceName = "org.gnome.Orca.Service"
	OrcaObjectPath  = "/org/gnome/Orca/Service"
)

type OrcaClient struct {
	conn                      *v5.Conn
	SpeechAndVerbosityManager SpeechAndVerbosityManager
}
type SpeechAndVerbosityManager struct {
	conn *v5.Conn
}

// Changes spoken number style between digits and words.
func (c *SpeechAndVerbosityManager) ChangeNumberStyle(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ChangeNumberStyle", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ChangeNumberStyle failed inside of Orca"))
	}
	return nil
}

// Cycle through the speech-dispatcher capitalization styles.
func (c *SpeechAndVerbosityManager) CycleCapitalizationStyle(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleCapitalizationStyle", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleCapitalizationStyle failed inside of Orca"))
	}
	return nil
}

// Cycle through the key echo levels.
func (c *SpeechAndVerbosityManager) CycleKeyEcho(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleKeyEcho", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleKeyEcho failed inside of Orca"))
	}
	return nil
}

// Cycles through punctuation levels for speech.
func (c *SpeechAndVerbosityManager) CyclePunctuationLevel(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CyclePunctuationLevel", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CyclePunctuationLevel failed inside of Orca"))
	}
	return nil
}

// Cycles through available speech synthesizers.
func (c *SpeechAndVerbosityManager) CycleSynthesizer(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleSynthesizer", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleSynthesizer failed inside of Orca"))
	}
	return nil
}

// Decreases the speech pitch
func (c *SpeechAndVerbosityManager) DecreasePitch(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreasePitch", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreasePitch failed inside of Orca"))
	}
	return nil
}

// Decreases the speech rate
func (c *SpeechAndVerbosityManager) DecreaseRate(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreaseRate", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreaseRate failed inside of Orca"))
	}
	return nil
}

// Decreases the speech volume
func (c *SpeechAndVerbosityManager) DecreaseVolume(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreaseVolume", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreaseVolume failed inside of Orca"))
	}
	return nil
}

// Increase the speech pitch
func (c *SpeechAndVerbosityManager) IncreasePitch(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreasePitch", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreasePitch failed inside of Orca"))
	}
	return nil
}

// Increases the speech rate.
func (c *SpeechAndVerbosityManager) IncreaseRate(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreaseRate", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreaseRate failed inside of Orca"))
	}
	return nil
}

// Increases the speech volume
func (c *SpeechAndVerbosityManager) IncreaseVolume(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreaseVolume", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreaseVolume failed inside of Orca"))
	}
	return nil
}

// Interrupts the speech server.
func (c *SpeechAndVerbosityManager) InterruptSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "InterruptSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command InterruptSpeech failed inside of Orca"))
	}
	return nil
}

// Shuts down and re-initializes speech.
func (c *SpeechAndVerbosityManager) RefreshSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "RefreshSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command RefreshSpeech failed inside of Orca"))
	}
	return nil
}

// Shuts down the speech server.
func (c *SpeechAndVerbosityManager) ShutdownSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ShutdownSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ShutdownSpeech failed inside of Orca"))
	}
	return nil
}

// Starts the speech server.
func (c *SpeechAndVerbosityManager) StartSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "StartSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command StartSpeech failed inside of Orca"))
	}
	return nil
}

// Toggles the speaking of indentation and justification.
func (c *SpeechAndVerbosityManager) ToggleIndentationAndJustification(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleIndentationAndJustification", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleIndentationAndJustification failed inside of Orca"))
	}
	return nil
}

// Toggles speech on and off.
func (c *SpeechAndVerbosityManager) ToggleSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleSpeech failed inside of Orca"))
	}
	return nil
}

// Toggles between speak cell and speak row.
func (c *SpeechAndVerbosityManager) ToggleTableCellReadingMode(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleTableCellReadingMode", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleTableCellReadingMode failed inside of Orca"))
	}
	return nil
}

// Toggles speech verbosity level between verbose and brief.
func (c *SpeechAndVerbosityManager) ToggleVerbosity(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleVerbosity", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleVerbosity failed inside of Orca"))
	}
	return nil
}
