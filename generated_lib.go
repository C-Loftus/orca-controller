// Copyright 2025 Colton Loftus
// SPDX-License-Identifier: AGPL-3.0-only

package pkg

import v5 "github.com/godbus/dbus/v5"

// DO NOT EDIT; AUTOGENERATED ON Sun Jul 27 11:07:34 2025
const (
	OrcaServiceName = "org.gnome.Orca.Service"
	OrcaObjectPath  = "/org/gnome/Orca/Service"
)

type OrcaClient struct {
	conn                       *v5.Conn
	FlatReviewPresenter        FlatReviewPresenter
	NotificationPresenter      NotificationPresenter
	ObjectNavigator            ObjectNavigator
	ActionPresenter            ActionPresenter
	WhereAmIPresenter          WhereAmIPresenter
	ClipboardPresenter         ClipboardPresenter
	TableNavigator             TableNavigator
	StructuralNavigator        StructuralNavigator
	SpeechAndVerbosityManager  SpeechAndVerbosityManager
	SleepModeManager           SleepModeManager
	SystemInformationPresenter SystemInformationPresenter
}
type FlatReviewPresenter struct {
	conn *v5.Conn
}

// Appends the string just presented to the clipboard.
func (c *FlatReviewPresenter) AppendToClipboard(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "AppendToClipboard", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command AppendToClipboard failed inside of Orca"))
	}
	return nil
}

// Copies the string just presented to the clipboard.
func (c *FlatReviewPresenter) CopyToClipboard(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CopyToClipboard", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CopyToClipboard failed inside of Orca"))
	}
	return nil
}

// Returns the current accessible object.
func (c *FlatReviewPresenter) GetCurrentObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GetCurrentObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GetCurrentObject failed inside of Orca"))
	}
	return nil
}

// Moves to the character above.
func (c *FlatReviewPresenter) GoAbove(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoAbove", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoAbove failed inside of Orca"))
	}
	return nil
}

// Moves to the character below.
func (c *FlatReviewPresenter) GoBelow(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoBelow", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoBelow failed inside of Orca"))
	}
	return nil
}

// Moves to the bottom left of the current window.
func (c *FlatReviewPresenter) GoBottomLeft(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoBottomLeft", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoBottomLeft failed inside of Orca"))
	}
	return nil
}

// Moves to the bottom right of the current window.
func (c *FlatReviewPresenter) GoEnd(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoEnd", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoEnd failed inside of Orca"))
	}
	return nil
}

// Moves to the end of the line.
func (c *FlatReviewPresenter) GoEndOfLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoEndOfLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoEndOfLine failed inside of Orca"))
	}
	return nil
}

// Moves to the top left of the current window.
func (c *FlatReviewPresenter) GoHome(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoHome", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoHome failed inside of Orca"))
	}
	return nil
}

// Moves to the next character.
func (c *FlatReviewPresenter) GoNextCharacter(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoNextCharacter", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoNextCharacter failed inside of Orca"))
	}
	return nil
}

// Moves to the next item or word.
func (c *FlatReviewPresenter) GoNextItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoNextItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoNextItem failed inside of Orca"))
	}
	return nil
}

// Moves to the next line.
func (c *FlatReviewPresenter) GoNextLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoNextLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoNextLine failed inside of Orca"))
	}
	return nil
}

// Moves to the previous character.
func (c *FlatReviewPresenter) GoPreviousCharacter(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoPreviousCharacter", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoPreviousCharacter failed inside of Orca"))
	}
	return nil
}

// Moves to the previous item or word.
func (c *FlatReviewPresenter) GoPreviousItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoPreviousItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoPreviousItem failed inside of Orca"))
	}
	return nil
}

// Moves to the previous line.
func (c *FlatReviewPresenter) GoPreviousLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoPreviousLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoPreviousLine failed inside of Orca"))
	}
	return nil
}

// Moves to the beginning of the current line.
func (c *FlatReviewPresenter) GoStartOfLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "GoStartOfLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command GoStartOfLine failed inside of Orca"))
	}
	return nil
}

// Attempts to synthesize a left click on the current accessible.
func (c *FlatReviewPresenter) LeftClickOnObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "LeftClickOnObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command LeftClickOnObject failed inside of Orca"))
	}
	return nil
}

// Presents the current word letter by letter phonetically.
func (c *FlatReviewPresenter) PhoneticItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PhoneticItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PhoneticItem failed inside of Orca"))
	}
	return nil
}

// Presents the current line letter by letter phonetically.
func (c *FlatReviewPresenter) PhoneticLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PhoneticLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PhoneticLine failed inside of Orca"))
	}
	return nil
}

// Presents the current character.
func (c *FlatReviewPresenter) PresentCharacter(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentCharacter", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentCharacter failed inside of Orca"))
	}
	return nil
}

// Presents the current item/word.
func (c *FlatReviewPresenter) PresentItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentItem failed inside of Orca"))
	}
	return nil
}

// Presents the current line.
func (c *FlatReviewPresenter) PresentLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentLine failed inside of Orca"))
	}
	return nil
}

// Presents the current accessible object.
func (c *FlatReviewPresenter) PresentObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentObject failed inside of Orca"))
	}
	return nil
}

// Attempts to synthesize a right click on the current accessible.
func (c *FlatReviewPresenter) RightClickOnObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "RightClickOnObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command RightClickOnObject failed inside of Orca"))
	}
	return nil
}

// Routes the mouse pointer to the current accessible.
func (c *FlatReviewPresenter) RoutePointerToObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "RoutePointerToObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command RoutePointerToObject failed inside of Orca"))
	}
	return nil
}

// Speaks the contents of the entire window.
func (c *FlatReviewPresenter) SayAll(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SayAll", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SayAll failed inside of Orca"))
	}
	return nil
}

// Displays the entire flat review contents in a text view.
func (c *FlatReviewPresenter) ShowContents(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ShowContents", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ShowContents failed inside of Orca"))
	}
	return nil
}

// Presents the current character phonetically.
func (c *FlatReviewPresenter) SpellCharacter(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SpellCharacter", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SpellCharacter failed inside of Orca"))
	}
	return nil
}

// Presents the current item/word letter by letter.
func (c *FlatReviewPresenter) SpellItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SpellItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SpellItem failed inside of Orca"))
	}
	return nil
}

// Presents the current line letter by letter.
func (c *FlatReviewPresenter) SpellLine(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SpellLine", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SpellLine failed inside of Orca"))
	}
	return nil
}

// Toggles between flat review mode and focus tracking mode.
func (c *FlatReviewPresenter) ToggleFlatReviewMode(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleFlatReviewMode", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleFlatReviewMode failed inside of Orca"))
	}
	return nil
}

// Toggles the restricting of flat review to the current object.
func (c *FlatReviewPresenter) ToggleRestrict(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleRestrict", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleRestrict failed inside of Orca"))
	}
	return nil
}

// Presents the current character's unicode value.
func (c *FlatReviewPresenter) UnicodeCurrentCharacter(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/FlatReviewPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "UnicodeCurrentCharacter", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command UnicodeCurrentCharacter failed inside of Orca"))
	}
	return nil
}

type NotificationPresenter struct {
	conn *v5.Conn
}

// Presents the last notification.
func (c *NotificationPresenter) PresentLastNotification(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/NotificationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentLastNotification", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentLastNotification failed inside of Orca"))
	}
	return nil
}

// Presents the next notification.
func (c *NotificationPresenter) PresentNextNotification(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/NotificationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentNextNotification", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentNextNotification failed inside of Orca"))
	}
	return nil
}

// Presents the previous notification.
func (c *NotificationPresenter) PresentPreviousNotification(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/NotificationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentPreviousNotification", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentPreviousNotification failed inside of Orca"))
	}
	return nil
}

// Opens a dialog with a list of the notifications.
func (c *NotificationPresenter) ShowNotificationList(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/NotificationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ShowNotificationList", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ShowNotificationList failed inside of Orca"))
	}
	return nil
}

type ObjectNavigator struct {
	conn *v5.Conn
}

// Moves the navigator focus to the first child of the current focus.
func (c *ObjectNavigator) MoveToFirstChild(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToFirstChild", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToFirstChild failed inside of Orca"))
	}
	return nil
}

// Moves the navigator focus to the next sibling of the current focus.
func (c *ObjectNavigator) MoveToNextSibling(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToNextSibling", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToNextSibling failed inside of Orca"))
	}
	return nil
}

// Moves the navigator focus to the parent of the current focus.
func (c *ObjectNavigator) MoveToParent(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToParent", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToParent failed inside of Orca"))
	}
	return nil
}

// Moves the navigator focus to the previous sibling of the current focus.
func (c *ObjectNavigator) MoveToPreviousSibling(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToPreviousSibling", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToPreviousSibling failed inside of Orca"))
	}
	return nil
}

// Attempts to click on the current focus.
func (c *ObjectNavigator) PerformAction(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PerformAction", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PerformAction failed inside of Orca"))
	}
	return nil
}

// Toggles simplified navigation.
func (c *ObjectNavigator) ToggleSimplify(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ObjectNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleSimplify", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleSimplify failed inside of Orca"))
	}
	return nil
}

type ActionPresenter struct {
	conn *v5.Conn
}

// Shows a list with all the available accessible actions.
func (c *ActionPresenter) ShowActionsList(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ActionPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ShowActionsList", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ShowActionsList failed inside of Orca"))
	}
	return nil
}

type WhereAmIPresenter struct {
	conn *v5.Conn
}

// Presents the font and formatting details for the current character.
func (c *WhereAmIPresenter) PresentCharacterAttributes(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentCharacterAttributes", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentCharacterAttributes failed inside of Orca"))
	}
	return nil
}

// Presents the default button of the current dialog.
func (c *WhereAmIPresenter) PresentDefaultButton(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentDefaultButton", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentDefaultButton failed inside of Orca"))
	}
	return nil
}

// Presents details about the current link.
func (c *WhereAmIPresenter) PresentLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentLink failed inside of Orca"))
	}
	return nil
}

// Presents the selected text.
func (c *WhereAmIPresenter) PresentSelectedText(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentSelectedText", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentSelectedText failed inside of Orca"))
	}
	return nil
}

// Presents the selected text or selected objects.
func (c *WhereAmIPresenter) PresentSelection(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentSelection", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentSelection failed inside of Orca"))
	}
	return nil
}

// Presents the size and position of the current object.
func (c *WhereAmIPresenter) PresentSizeAndPosition(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentSizeAndPosition", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentSizeAndPosition failed inside of Orca"))
	}
	return nil
}

// Presents the status bar and info bar of the current window.
func (c *WhereAmIPresenter) PresentStatusBar(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentStatusBar", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentStatusBar failed inside of Orca"))
	}
	return nil
}

// Presents the title of the current window.
func (c *WhereAmIPresenter) PresentTitle(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentTitle", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentTitle failed inside of Orca"))
	}
	return nil
}

// Presents basic information about the current location.
func (c *WhereAmIPresenter) WhereAmIBasic(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "WhereAmIBasic", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command WhereAmIBasic failed inside of Orca"))
	}
	return nil
}

// Presents detailed information about the current location.
func (c *WhereAmIPresenter) WhereAmIDetailed(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/WhereAmIPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "WhereAmIDetailed", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command WhereAmIDetailed failed inside of Orca"))
	}
	return nil
}

type ClipboardPresenter struct {
	conn *v5.Conn
}

// Presents the clipboard contents.
func (c *ClipboardPresenter) PresentClipboardContents(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/ClipboardPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentClipboardContents", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentClipboardContents failed inside of Orca"))
	}
	return nil
}

type TableNavigator struct {
	conn *v5.Conn
}

// Clears the row for the dynamic column headers.
func (c *TableNavigator) ClearDynamicColumnHeadersRow(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ClearDynamicColumnHeadersRow", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ClearDynamicColumnHeadersRow failed inside of Orca"))
	}
	return nil
}

// Clears the column for the dynamic row headers.
func (c *TableNavigator) ClearDynamicRowHeadersColumn(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ClearDynamicRowHeadersColumn", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ClearDynamicRowHeadersColumn failed inside of Orca"))
	}
	return nil
}

// Moves to the cell below.
func (c *TableNavigator) MoveDown(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveDown", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveDown failed inside of Orca"))
	}
	return nil
}

// Moves to the cell on the left.
func (c *TableNavigator) MoveLeft(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveLeft", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveLeft failed inside of Orca"))
	}
	return nil
}

// Moves to the cell on the right.
func (c *TableNavigator) MoveRight(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveRight", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveRight failed inside of Orca"))
	}
	return nil
}

// Moves to the beginning of the row.
func (c *TableNavigator) MoveToBeginningOfRow(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToBeginningOfRow", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToBeginningOfRow failed inside of Orca"))
	}
	return nil
}

// Moves to the bottom of the column.
func (c *TableNavigator) MoveToBottomOfColumn(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToBottomOfColumn", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToBottomOfColumn failed inside of Orca"))
	}
	return nil
}

// Moves to the end of the row.
func (c *TableNavigator) MoveToEndOfRow(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToEndOfRow", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToEndOfRow failed inside of Orca"))
	}
	return nil
}

// Moves to the first cell.
func (c *TableNavigator) MoveToFirstCell(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToFirstCell", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToFirstCell failed inside of Orca"))
	}
	return nil
}

// Moves to the last cell.
func (c *TableNavigator) MoveToLastCell(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToLastCell", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToLastCell failed inside of Orca"))
	}
	return nil
}

// Moves to the top of the column.
func (c *TableNavigator) MoveToTopOfColumn(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveToTopOfColumn", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveToTopOfColumn failed inside of Orca"))
	}
	return nil
}

// Moves to the cell above.
func (c *TableNavigator) MoveUp(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "MoveUp", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command MoveUp failed inside of Orca"))
	}
	return nil
}

// Sets the row for the dynamic header columns to the current row.
func (c *TableNavigator) SetDynamicColumnHeadersRow(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SetDynamicColumnHeadersRow", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SetDynamicColumnHeadersRow failed inside of Orca"))
	}
	return nil
}

// Sets the column for the dynamic row headers to the current column.
func (c *TableNavigator) SetDynamicRowHeadersColumn(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "SetDynamicRowHeadersColumn", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command SetDynamicRowHeadersColumn failed inside of Orca"))
	}
	return nil
}

// Toggles table navigation.
func (c *TableNavigator) ToggleEnabled(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/TableNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleEnabled", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleEnabled failed inside of Orca"))
	}
	return nil
}

type StructuralNavigator struct {
	conn *v5.Conn
}

// Moves to the end of the current container.
func (c *StructuralNavigator) ContainerEnd(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ContainerEnd", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ContainerEnd failed inside of Orca"))
	}
	return nil
}

// Moves to the start of the current container.
func (c *StructuralNavigator) ContainerStart(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ContainerStart", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ContainerStart failed inside of Orca"))
	}
	return nil
}

// Cycles among the structural navigation modes.
func (c *StructuralNavigator) CycleMode(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleMode", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleMode failed inside of Orca"))
	}
	return nil
}

// Displays a list of blockquotes.
func (c *StructuralNavigator) ListBlockquotes(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListBlockquotes", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListBlockquotes failed inside of Orca"))
	}
	return nil
}

// Displays a list of buttons.
func (c *StructuralNavigator) ListButtons(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListButtons", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListButtons failed inside of Orca"))
	}
	return nil
}

// Displays a list of checkboxes.
func (c *StructuralNavigator) ListCheckboxes(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListCheckboxes", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListCheckboxes failed inside of Orca"))
	}
	return nil
}

// Displays a list of clickables.
func (c *StructuralNavigator) ListClickables(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListClickables", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListClickables failed inside of Orca"))
	}
	return nil
}

// Displays a list of combo boxes.
func (c *StructuralNavigator) ListComboboxes(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListComboboxes", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListComboboxes failed inside of Orca"))
	}
	return nil
}

// Displays a list of entries.
func (c *StructuralNavigator) ListEntries(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListEntries", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListEntries failed inside of Orca"))
	}
	return nil
}

// Displays a list of form fields.
func (c *StructuralNavigator) ListFormFields(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListFormFields", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListFormFields failed inside of Orca"))
	}
	return nil
}

// Displays a list of headings.
func (c *StructuralNavigator) ListHeadings(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadings", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadings failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 1 headings.
func (c *StructuralNavigator) ListHeadingsLevel1(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel1", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel1 failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 2 headings.
func (c *StructuralNavigator) ListHeadingsLevel2(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel2", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel2 failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 3 headings.
func (c *StructuralNavigator) ListHeadingsLevel3(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel3", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel3 failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 4 headings.
func (c *StructuralNavigator) ListHeadingsLevel4(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel4", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel4 failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 5 headings.
func (c *StructuralNavigator) ListHeadingsLevel5(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel5", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel5 failed inside of Orca"))
	}
	return nil
}

// Displays a list of level 6 headings.
func (c *StructuralNavigator) ListHeadingsLevel6(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListHeadingsLevel6", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListHeadingsLevel6 failed inside of Orca"))
	}
	return nil
}

// Displays a list of iframes.
func (c *StructuralNavigator) ListIframes(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListIframes", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListIframes failed inside of Orca"))
	}
	return nil
}

// Displays a list of images.
func (c *StructuralNavigator) ListImages(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListImages", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListImages failed inside of Orca"))
	}
	return nil
}

// Displays a list of landmarks.
func (c *StructuralNavigator) ListLandmarks(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListLandmarks", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListLandmarks failed inside of Orca"))
	}
	return nil
}

// Displays a list of large objects.
func (c *StructuralNavigator) ListLargeObjects(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListLargeObjects", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListLargeObjects failed inside of Orca"))
	}
	return nil
}

// Displays a list of links.
func (c *StructuralNavigator) ListLinks(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListLinks", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListLinks failed inside of Orca"))
	}
	return nil
}

// Displays a list of list items.
func (c *StructuralNavigator) ListListItems(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListListItems", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListListItems failed inside of Orca"))
	}
	return nil
}

// Displays a list of lists.
func (c *StructuralNavigator) ListLists(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListLists", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListLists failed inside of Orca"))
	}
	return nil
}

// Displays a list of paragraphs.
func (c *StructuralNavigator) ListParagraphs(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListParagraphs", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListParagraphs failed inside of Orca"))
	}
	return nil
}

// Displays a list of radio buttons.
func (c *StructuralNavigator) ListRadioButtons(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListRadioButtons", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListRadioButtons failed inside of Orca"))
	}
	return nil
}

// Displays a list of tables.
func (c *StructuralNavigator) ListTables(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListTables", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListTables failed inside of Orca"))
	}
	return nil
}

// Displays a list of unvisited links.
func (c *StructuralNavigator) ListUnvisitedLinks(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListUnvisitedLinks", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListUnvisitedLinks failed inside of Orca"))
	}
	return nil
}

// Displays a list of visited links.
func (c *StructuralNavigator) ListVisitedLinks(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ListVisitedLinks", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ListVisitedLinks failed inside of Orca"))
	}
	return nil
}

// Goes to the next blockquote.
func (c *StructuralNavigator) NextBlockquote(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextBlockquote", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextBlockquote failed inside of Orca"))
	}
	return nil
}

// Goes to the next button.
func (c *StructuralNavigator) NextButton(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextButton", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextButton failed inside of Orca"))
	}
	return nil
}

// Goes to the next checkbox.
func (c *StructuralNavigator) NextCheckbox(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextCheckbox", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextCheckbox failed inside of Orca"))
	}
	return nil
}

// Goes to the next clickable.
func (c *StructuralNavigator) NextClickable(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextClickable", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextClickable failed inside of Orca"))
	}
	return nil
}

// Goes to the next combo box.
func (c *StructuralNavigator) NextCombobox(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextCombobox", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextCombobox failed inside of Orca"))
	}
	return nil
}

// Goes to the next entry.
func (c *StructuralNavigator) NextEntry(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextEntry", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextEntry failed inside of Orca"))
	}
	return nil
}

// Goes to the next form field.
func (c *StructuralNavigator) NextFormField(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextFormField", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextFormField failed inside of Orca"))
	}
	return nil
}

// Goes to the next heading.
func (c *StructuralNavigator) NextHeading(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeading", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeading failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 1 heading.
func (c *StructuralNavigator) NextHeadingLevel1(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel1", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel1 failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 2 heading.
func (c *StructuralNavigator) NextHeadingLevel2(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel2", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel2 failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 3 heading.
func (c *StructuralNavigator) NextHeadingLevel3(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel3", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel3 failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 4 heading.
func (c *StructuralNavigator) NextHeadingLevel4(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel4", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel4 failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 5 heading.
func (c *StructuralNavigator) NextHeadingLevel5(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel5", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel5 failed inside of Orca"))
	}
	return nil
}

// Goes to the next level 6 heading.
func (c *StructuralNavigator) NextHeadingLevel6(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextHeadingLevel6", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextHeadingLevel6 failed inside of Orca"))
	}
	return nil
}

// Goes to the next iframe.
func (c *StructuralNavigator) NextIframe(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextIframe", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextIframe failed inside of Orca"))
	}
	return nil
}

// Goes to the next image.
func (c *StructuralNavigator) NextImage(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextImage", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextImage failed inside of Orca"))
	}
	return nil
}

// Goes to the next landmark.
func (c *StructuralNavigator) NextLandmark(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextLandmark", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextLandmark failed inside of Orca"))
	}
	return nil
}

// Goes to the next large object.
func (c *StructuralNavigator) NextLargeObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextLargeObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextLargeObject failed inside of Orca"))
	}
	return nil
}

// Goes to the next link.
func (c *StructuralNavigator) NextLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextLink failed inside of Orca"))
	}
	return nil
}

// Goes to the next list.
func (c *StructuralNavigator) NextList(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextList", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextList failed inside of Orca"))
	}
	return nil
}

// Goes to the next list item.
func (c *StructuralNavigator) NextListItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextListItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextListItem failed inside of Orca"))
	}
	return nil
}

// Goes to the next live region.
func (c *StructuralNavigator) NextLiveRegion(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextLiveRegion", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextLiveRegion failed inside of Orca"))
	}
	return nil
}

// Goes to the next paragraph.
func (c *StructuralNavigator) NextParagraph(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextParagraph", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextParagraph failed inside of Orca"))
	}
	return nil
}

// Goes to the next radio button.
func (c *StructuralNavigator) NextRadioButton(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextRadioButton", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextRadioButton failed inside of Orca"))
	}
	return nil
}

// Goes to the next separator.
func (c *StructuralNavigator) NextSeparator(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextSeparator", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextSeparator failed inside of Orca"))
	}
	return nil
}

// Goes to the next table.
func (c *StructuralNavigator) NextTable(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextTable", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextTable failed inside of Orca"))
	}
	return nil
}

// Goes to the next unvisited link.
func (c *StructuralNavigator) NextUnvisitedLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextUnvisitedLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextUnvisitedLink failed inside of Orca"))
	}
	return nil
}

// Goes to the next visited link.
func (c *StructuralNavigator) NextVisitedLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "NextVisitedLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command NextVisitedLink failed inside of Orca"))
	}
	return nil
}

// Goes to the previous blockquote.
func (c *StructuralNavigator) PreviousBlockquote(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousBlockquote", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousBlockquote failed inside of Orca"))
	}
	return nil
}

// Goes to the previous button.
func (c *StructuralNavigator) PreviousButton(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousButton", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousButton failed inside of Orca"))
	}
	return nil
}

// Goes to the previous checkbox.
func (c *StructuralNavigator) PreviousCheckbox(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousCheckbox", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousCheckbox failed inside of Orca"))
	}
	return nil
}

// Goes to the previous clickable.
func (c *StructuralNavigator) PreviousClickable(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousClickable", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousClickable failed inside of Orca"))
	}
	return nil
}

// Goes to the previous combo box.
func (c *StructuralNavigator) PreviousCombobox(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousCombobox", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousCombobox failed inside of Orca"))
	}
	return nil
}

// Goes to the previous entry.
func (c *StructuralNavigator) PreviousEntry(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousEntry", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousEntry failed inside of Orca"))
	}
	return nil
}

// Goes to the previous form field.
func (c *StructuralNavigator) PreviousFormField(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousFormField", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousFormField failed inside of Orca"))
	}
	return nil
}

// Goes to the previous heading.
func (c *StructuralNavigator) PreviousHeading(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeading", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeading failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 1 heading.
func (c *StructuralNavigator) PreviousHeadingLevel1(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel1", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel1 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 2 heading.
func (c *StructuralNavigator) PreviousHeadingLevel2(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel2", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel2 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 3 heading.
func (c *StructuralNavigator) PreviousHeadingLevel3(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel3", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel3 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 4 heading.
func (c *StructuralNavigator) PreviousHeadingLevel4(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel4", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel4 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 5 heading.
func (c *StructuralNavigator) PreviousHeadingLevel5(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel5", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel5 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous level 6 heading.
func (c *StructuralNavigator) PreviousHeadingLevel6(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousHeadingLevel6", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousHeadingLevel6 failed inside of Orca"))
	}
	return nil
}

// Goes to the previous iframe.
func (c *StructuralNavigator) PreviousIframe(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousIframe", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousIframe failed inside of Orca"))
	}
	return nil
}

// Goes to the previous image.
func (c *StructuralNavigator) PreviousImage(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousImage", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousImage failed inside of Orca"))
	}
	return nil
}

// Goes to the previous landmark.
func (c *StructuralNavigator) PreviousLandmark(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousLandmark", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousLandmark failed inside of Orca"))
	}
	return nil
}

// Goes to the previous large object.
func (c *StructuralNavigator) PreviousLargeObject(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousLargeObject", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousLargeObject failed inside of Orca"))
	}
	return nil
}

// Goes to the previous link.
func (c *StructuralNavigator) PreviousLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousLink failed inside of Orca"))
	}
	return nil
}

// Goes to the previous list.
func (c *StructuralNavigator) PreviousList(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousList", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousList failed inside of Orca"))
	}
	return nil
}

// Goes to the previous list item.
func (c *StructuralNavigator) PreviousListItem(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousListItem", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousListItem failed inside of Orca"))
	}
	return nil
}

// Goes to the previous live region.
func (c *StructuralNavigator) PreviousLiveRegion(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousLiveRegion", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousLiveRegion failed inside of Orca"))
	}
	return nil
}

// Goes to the previous paragraph.
func (c *StructuralNavigator) PreviousParagraph(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousParagraph", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousParagraph failed inside of Orca"))
	}
	return nil
}

// Goes to the previous radio button.
func (c *StructuralNavigator) PreviousRadioButton(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousRadioButton", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousRadioButton failed inside of Orca"))
	}
	return nil
}

// Goes to the previous separator.
func (c *StructuralNavigator) PreviousSeparator(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousSeparator", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousSeparator failed inside of Orca"))
	}
	return nil
}

// Goes to the previous table.
func (c *StructuralNavigator) PreviousTable(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousTable", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousTable failed inside of Orca"))
	}
	return nil
}

// Goes to the previous unvisited link.
func (c *StructuralNavigator) PreviousUnvisitedLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousUnvisitedLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousUnvisitedLink failed inside of Orca"))
	}
	return nil
}

// Goes to the previous visited link.
func (c *StructuralNavigator) PreviousVisitedLink(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/StructuralNavigator")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PreviousVisitedLink", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PreviousVisitedLink failed inside of Orca"))
	}
	return nil
}

type SpeechAndVerbosityManager struct {
	conn *v5.Conn
}

// Changes spoken number style between digits and words.
func (c *SpeechAndVerbosityManager) ChangeNumberStyle(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ChangeNumberStyle", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ChangeNumberStyle failed inside of Orca"))
	}
	return nil
}

// Cycle through the speech-dispatcher capitalization styles.
func (c *SpeechAndVerbosityManager) CycleCapitalizationStyle(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleCapitalizationStyle", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleCapitalizationStyle failed inside of Orca"))
	}
	return nil
}

// Cycle through the key echo levels.
func (c *SpeechAndVerbosityManager) CycleKeyEcho(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleKeyEcho", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleKeyEcho failed inside of Orca"))
	}
	return nil
}

// Cycles through punctuation levels for speech.
func (c *SpeechAndVerbosityManager) CyclePunctuationLevel(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CyclePunctuationLevel", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CyclePunctuationLevel failed inside of Orca"))
	}
	return nil
}

// Cycles through available speech synthesizers.
func (c *SpeechAndVerbosityManager) CycleSynthesizer(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "CycleSynthesizer", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CycleSynthesizer failed inside of Orca"))
	}
	return nil
}

// Decreases the speech pitch
func (c *SpeechAndVerbosityManager) DecreasePitch(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreasePitch", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreasePitch failed inside of Orca"))
	}
	return nil
}

// Decreases the speech rate.
func (c *SpeechAndVerbosityManager) DecreaseRate(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreaseRate", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreaseRate failed inside of Orca"))
	}
	return nil
}

// Decreases the speech volume
func (c *SpeechAndVerbosityManager) DecreaseVolume(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "DecreaseVolume", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command DecreaseVolume failed inside of Orca"))
	}
	return nil
}

// Increase the speech pitch
func (c *SpeechAndVerbosityManager) IncreasePitch(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreasePitch", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreasePitch failed inside of Orca"))
	}
	return nil
}

// Increases the speech rate.
func (c *SpeechAndVerbosityManager) IncreaseRate(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreaseRate", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreaseRate failed inside of Orca"))
	}
	return nil
}

// Increases the speech volume
func (c *SpeechAndVerbosityManager) IncreaseVolume(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "IncreaseVolume", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command IncreaseVolume failed inside of Orca"))
	}
	return nil
}

// Interrupts the speech server.
func (c *SpeechAndVerbosityManager) InterruptSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "InterruptSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command InterruptSpeech failed inside of Orca"))
	}
	return nil
}

// Shuts down and re-initializes speech.
func (c *SpeechAndVerbosityManager) RefreshSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "RefreshSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command RefreshSpeech failed inside of Orca"))
	}
	return nil
}

// Shuts down the speech server.
func (c *SpeechAndVerbosityManager) ShutdownSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ShutdownSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ShutdownSpeech failed inside of Orca"))
	}
	return nil
}

// Starts the speech server.
func (c *SpeechAndVerbosityManager) StartSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "StartSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command StartSpeech failed inside of Orca"))
	}
	return nil
}

// Toggles the speaking of indentation and justification.
func (c *SpeechAndVerbosityManager) ToggleIndentationAndJustification(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleIndentationAndJustification", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleIndentationAndJustification failed inside of Orca"))
	}
	return nil
}

// Toggles speech on and off.
func (c *SpeechAndVerbosityManager) ToggleSpeech(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleSpeech", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleSpeech failed inside of Orca"))
	}
	return nil
}

// Toggles between speak cell and speak row.
func (c *SpeechAndVerbosityManager) ToggleTableCellReadingMode(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleTableCellReadingMode", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleTableCellReadingMode failed inside of Orca"))
	}
	return nil
}

// Toggles speech verbosity level between verbose and brief.
func (c *SpeechAndVerbosityManager) ToggleVerbosity(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleVerbosity", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleVerbosity failed inside of Orca"))
	}
	return nil
}

// Returns a list of available servers.
func (c *SpeechAndVerbosityManager) AvailableServers() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "AvailableServers").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns a list of available synthesizers of the speech server.
func (c *SpeechAndVerbosityManager) AvailableSynthesizers() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "AvailableSynthesizers").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns a list of available voices for the current synthesizer.
func (c *SpeechAndVerbosityManager) AvailableVoices() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "AvailableVoices").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the name of the current speech server (Speech Dispatcher or Spiel).
func (c *SpeechAndVerbosityManager) CurrentServer() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "CurrentServer").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the current synthesizer of the speech server.
func (c *SpeechAndVerbosityManager) CurrentSynthesizer() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "CurrentSynthesizer").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the current voice name.
func (c *SpeechAndVerbosityManager) CurrentVoice() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "CurrentVoice").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the current speech pitch.
func (c *SpeechAndVerbosityManager) Pitch() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "Pitch").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the current speech rate.
func (c *SpeechAndVerbosityManager) Rate() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "Rate").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Returns the current speech volume.
func (c *SpeechAndVerbosityManager) Volume() (any, error) {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var result any
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeGetter", 0, "Volume").Store(&result)
	if err != nil {
		return "", err
	}
	return result, nil
}

// Sets the current speech server (e.g. Speech Dispatcher or Spiel).
func (c *SpeechAndVerbosityManager) SetCurrentServer(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "CurrentServer", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CurrentServer failed inside of Orca"))
	}
	return nil
}

// Sets the current synthesizer of the active speech server.
func (c *SpeechAndVerbosityManager) SetCurrentSynthesizer(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "CurrentSynthesizer", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CurrentSynthesizer failed inside of Orca"))
	}
	return nil
}

// Sets the current voice for the active synthesizer.
func (c *SpeechAndVerbosityManager) SetCurrentVoice(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "CurrentVoice", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command CurrentVoice failed inside of Orca"))
	}
	return nil
}

// Sets the current speech pitch.
func (c *SpeechAndVerbosityManager) SetPitch(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "Pitch", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command Pitch failed inside of Orca"))
	}
	return nil
}

// Sets the current speech rate.
func (c *SpeechAndVerbosityManager) SetRate(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "Rate", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command Rate failed inside of Orca"))
	}
	return nil
}

// Sets the current speech volume.
func (c *SpeechAndVerbosityManager) SetVolume(input any) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SpeechAndVerbosityManager")
	var succeeded bool
	arg := v5.MakeVariant(input)
	err := obj.Call("org.gnome.Orca.Module.ExecuteRuntimeSetter", 0, "Volume", arg).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command Volume failed inside of Orca"))
	}
	return nil
}

type SleepModeManager struct {
	conn *v5.Conn
}

// Toggles sleep mode for the active application.
func (c *SleepModeManager) ToggleSleepMode(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SleepModeManager")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "ToggleSleepMode", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command ToggleSleepMode failed inside of Orca"))
	}
	return nil
}

type SystemInformationPresenter struct {
	conn *v5.Conn
}

// Presents the battery status.
func (c *SystemInformationPresenter) PresentBatteryStatus(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SystemInformationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentBatteryStatus", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentBatteryStatus failed inside of Orca"))
	}
	return nil
}

// Presents the cpu and memory usage.
func (c *SystemInformationPresenter) PresentCpuAndMemoryUsage(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SystemInformationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentCpuAndMemoryUsage", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentCpuAndMemoryUsage failed inside of Orca"))
	}
	return nil
}

// Presents the current date.
func (c *SystemInformationPresenter) PresentDate(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SystemInformationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentDate", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentDate failed inside of Orca"))
	}
	return nil
}

// Presents the current time.
func (c *SystemInformationPresenter) PresentTime(notifyUser bool) error {
	obj := c.conn.Object("org.gnome.Orca.Service", "/org/gnome/Orca/Service/SystemInformationPresenter")
	var succeeded bool
	err := obj.Call("org.gnome.Orca.Module.ExecuteCommand", 0, "PresentTime", notifyUser).Store(&succeeded)
	if err != nil {
		return err
	}
	if !succeeded {
		return (NewOrcaError("command PresentTime failed inside of Orca"))
	}
	return nil
}
